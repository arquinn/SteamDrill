/* dxpcconf.h.  Generated by configure.  */
#ifndef DXPCCONF_H_
#define DXPCCONF_H_

#define ACCEPT_SOCKLEN_T socklen_t
#define HAVE_IOSTREAM 1
/* #undef HAVE_IOSTREAM_H */
/* #undef HAVE_FSTREAM */
/* #undef HAVE_FSTREAM_H */

#if defined(HAVE_IOSTREAM)

// Use fullblown modern C++ iostream fun.

#include <iostream>
#include <fstream>
#define OSTREAM std::ostream
#define OFSTREAM std::ofstream
#define COUT std::cout
#define CERR std::cerr
#define ENDL std::endl
#define IOS_OUT std::ios::out

#elif defined (HAVE_IOSTREAM_H)

// Stone-age iostreams.

#include <iostream.h>
#include <fstream.h>
#define OSTREAM ostream
#define OFSTREAM ofstream
#define COUT cout
#define CERR cerr
#define ENDL endl
#define IOS_OUT ios::out

#else
#error Require iostream or iostream.h
#endif

#if defined(__MINGW32__)

#include <winsock.h>

# define SOCKREAD(socket,buffer,len) \
        recv(socket,(char *)buffer,len,0)
# define SOCKWRITE(socket,buffer,len) \
        send(socket,(const char *)buffer,len,0)
# define SOCKCLOSE(socket) \
        closesocket(socket)

#define SETNODELAY(fd)                                       \
do {                                                         \
        int one = 1;                                         \
        setsockopt(fd, IPPROTO_TCP, TCP_NODELAY,             \
                       (const char *)&one, sizeof(one));     \
} while (0)

#define ACCEPT_SOCKLEN_T socklen_t

#else

# define SOCKREAD(socket,buffer,len) \
        read(socket,buffer,len)
# define SOCKWRITE(socket,buffer,len) \
        write(socket,buffer,len)
# define SOCKCLOSE(socket) \
         close(socket)

#define SETNODELAY(fd)                                       \
do {                                                         \
        int one = 1;                                         \
        setsockopt(fd, IPPROTO_TCP, TCP_NODELAY,             \
                       (const void *)&one, sizeof(one));     \
} while (0)

#endif

#endif
