/*
 *  Gradle build file for the Steamdrill Data-Source. Let's GO!
 */



buildscript {
		repositories {
				mavenCentral()
		}
    dependencies {
  			classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.15'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'com.google.protobuf'
apply plugin: 'cpp'
version = '1.0'

sourceSets {
    main {
        proto {
            srcDir '../protos'
        }
				scala {
				    srcDirs = ['src/main/scala', 'src/main/java']
				}
				java {
				    srcDirs = []
				}
    }
}

// for getting JNI to work!
task generateJniHeaders(type: JavaCompile) {
		 classpath = sourceSets.main.compileClasspath
		 destinationDir file("$projectDir/src/generated/jni")
		 source = "src/main/java/jni"
		 options.compilerArgs += [
		     '-h', file("$projectDir/src/generated/jni"),
				 // '-d', file("$projectDir/src/generated/jni-tmp")
		 ]
//		 doLast {
//		     delete file("$projectDir/generated/jni-tmp")
//		 }
}


model {
    repositories {
        libs(PrebuiltLibraries) {
				    jdk {
						    headers.srcDirs System.getenv()["JAVA_HOME"] + "/include",
																System.getenv()["JAVA_HOME"] + "/include/linux",
																"../utils",
																"src/generated/jni"
								binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../utils/obj/shared_state.o")
								}
            }
				}
    }
		toolChains {
		    gcc(Gcc) {
				    eachPlatform {
						    cCompiler.executable = "/usr/bin/gcc"
								cppCompiler.executable = "/usr/bin/g++"
								linker.withArguments {args ->
								    args << "../utils/obj/shared_state.o"
								}
						}
        }
		}
		components {
        shm_iter(NativeLibrarySpec) {
				    sources {
						    cpp {
								    source {
										    srcDir "src/main/c"
												lib library: 'jdk', linkage: 'api'
										}
								}
						}
						binaries.withType(StaticLibraryBinarySpec) {
						    buildable = false
						}
				}
    }

tasks.compileShm_iterSharedLibraryShm_iterCpp {
    dependsOn generateJniHeaders
}
}

protobuf {
    protoc {
		    artifact = "com.google.protobuf:protoc:3.11.0"
		}
		generatedFilesBaseDir = "$projectDir/src/generated"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
		implementation group: "com.google.protobuf", name: "protobuf-java", version:"3.11.0"
		implementation group: "com.google.protobuf", name: "protoc", version: "3.11.0"
    compileOnly 'org.apache.spark:spark-core_2.11:2.4.0'
    compileOnly 'org.apache.spark:spark-catalyst_2.11:2.4.0'
    compileOnly 'org.apache.spark:spark-sql_2.11:2.4.0'
    compileOnly 'log4j:log4j:1.2.17'
}

shadowJar {
	relocate ('com.google.protobuf', 'omnitable.com.google.protobuf')

}
build.dependsOn shadowJar


/*
gradle.taskGraph.whenReady {taskGraph ->
    println "Found task graph: " + taskGraph
		println "Found" + taskGraph.allTasks.size() + "tasks"
		taskGraph.allTasks.forEach { task ->
		    println task
				task.dependsOn.forEach { dep ->
				     println "   - " + dep
			  }
		}
}
*/

task listrepos {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
   }
}